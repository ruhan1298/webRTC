<!DOCTYPE html>
<html>
<head>
  <title>Call Room</title>
  <style>
    video {
      width: 45%;
      margin: 5px;
      border: 2px solid #000;
    }
    #chatBox {
      height: 150px;
      overflow-y: auto;
      border: 1px solid #000;
      padding: 5px;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <h3>Room ID: {{room}}</h3>
  <div id="callTimer">00:00</div>
  <video id="localVideo" autoplay muted playsinline></video>
  <video id="remoteVideo" autoplay playsinline></video>
  <br/>
  <button onclick="toggleAudio()">Mute/Unmute</button>
  <button onclick="toggleVideo()">Camera On/Off</button>
  <button onclick="startScreenShare()">Share Screen</button>
        <button class="end" onclick="endCall()">End Call</button>


  <div id="chatBox"></div>
  <input id="chatInput" placeholder="Type a message..." onkeydown="if(event.key==='Enter') sendMessage(this.value)" />

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const room = "{{room}}";
    // public/script.js
const socket = io();
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const chatBox = document.getElementById('chatBox');
let localStream;
let remoteStream;
let peerConnection;
let startTime;

const config = {
  iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
};

(async function init() {
  localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
  localVideo.srcObject = localStream;

  socket.emit('join', room);
})();

socket.on('user-joined', async (id) => {
  createConnection();
  const offer = await peerConnection.createOffer();
  await peerConnection.setLocalDescription(offer);
  socket.emit('offer', { room, offer });
  startTimer();
});

socket.on('offer', async (offer, id) => {
  createConnection();
  await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
  const answer = await peerConnection.createAnswer();
  await peerConnection.setLocalDescription(answer);
  socket.emit('answer', { room, answer });
  startTimer();
});

socket.on('answer', async (answer, id) => {
  await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
});

socket.on('ice-candidate', (candidate, id) => {
  peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
});

socket.on('chat-message', ({ msg }) => {
  chatBox.innerHTML += `<div>${msg}</div>`;
});

function createConnection() {
  peerConnection = new RTCPeerConnection(config);

  peerConnection.onicecandidate = event => {
    if (event.candidate) {
      socket.emit('ice-candidate', { room, candidate: event.candidate });
    }
  };

  peerConnection.ontrack = event => {
    if (!remoteStream) {
      remoteStream = new MediaStream();
      remoteVideo.srcObject = remoteStream;
    }
    remoteStream.addTrack(event.track);
  };

  localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
}

function toggleAudio() {
  const enabled = localStream.getAudioTracks()[0].enabled;
  localStream.getAudioTracks()[0].enabled = !enabled;
}

function toggleVideo() {
  const enabled = localStream.getVideoTracks()[0].enabled;
  localStream.getVideoTracks()[0].enabled = !enabled;
}

async function startScreenShare() {
  const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });
  const screenTrack = screenStream.getVideoTracks()[0];
  const sender = peerConnection.getSenders().find(s => s.track.kind === 'video');
  sender.replaceTrack(screenTrack);

  screenTrack.onended = () => {
    sender.replaceTrack(localStream.getVideoTracks()[0]);
  };
}

function sendMessage(msg) {
  socket.emit('chat-message', { room, msg });
  chatBox.innerHTML += `<div style="text-align:right">You: ${msg}</div>`;
  document.getElementById('chatInput').value = '';
}

function startTimer() {
  startTime = Date.now();
  setInterval(() => {
    const diff = Date.now() - startTime;
    const mins = Math.floor(diff / 60000);
    const secs = Math.floor((diff % 60000) / 1000);
    document.getElementById('callTimer').innerText = `${mins}:${secs.toString().padStart(2, '0')}`;
  }, 1000);
}
function endCall() {
  if (peerConnection) {
    peerConnection.close();
    peerConnection = null;
  }
  if (localStream) {
    localStream.getTracks().forEach(track => track.stop());
    localStream = null;
  }
  if (remoteStream) {
    remoteStream.getTracks().forEach(track => track.stop());
    remoteStream = null;
  }
  socket.emit('leave', room);
  window.location.href = '/room/calling';
}


  </script>
  <script src="/script.js"></script>
</body>
</html>
