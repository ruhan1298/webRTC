<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebRTC Video Call with Chat</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 2.5em;
        }

        .header p {
            color: #7f8c8d;
            font-size: 1.1em;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 30px;
        }

        .video-section {
            display: flex;
            flex-direction: column;
        }

        .controls-panel {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }

        .permission-box {
            background: #fff3cd;
            border: 2px solid #ffeaa7;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 500;
        }

        .permission-granted {
            background: #d4edda !important;
            border-color: #00b894 !important;
            color: #155724;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            margin-bottom: 15px;
        }

        .input-group label {
            font-weight: 600;
            margin-bottom: 5px;
            color: #2c3e50;
        }

        .input-group input, .input-group select {
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .input-group input:focus, .input-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            margin: 5px;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }

        .btn-success {
            background: #00b894;
            color: white;
        }

        .btn-success:hover {
            background: #00a085;
        }

        .btn-danger {
            background: #e74c3c;
            color: white;
        }

        .btn-danger:hover {
            background: #c0392b;
        }

        .btn-warning {
            background: #f39c12;
            color: white;
        }

        .btn-warning:hover {
            background: #e67e22;
        }

        .video-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 25px;
        }

        .video-wrapper {
            position: relative;
            background: #000;
            border-radius: 15px;
            overflow: hidden;
            aspect-ratio: 4/3;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }

        .video-wrapper video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .video-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            font-weight: 600;
        }

        .video-controls {
            position: absolute;
            bottom: 15px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
        }

        .control-btn {
            width: 50px;
            height: 50px;
            border: none;
            border-radius: 50%;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .video-on {
            background: #00b894;
            color: white;
        }

        .video-off {
            background: #e74c3c;
            color: white;
        }

        .audio-on {
            background: #667eea;
            color: white;
        }

        .audio-off {
            background: #e74c3c;
            color: white;
        }

        .control-btn:hover {
            transform: scale(1.1);
        }

        .status-indicators {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .status-item {
            text-align: center;
            flex: 1;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 10px;
            margin: 0 5px;
        }

        .status {
            font-weight: 600;
            padding: 10px;
            border-radius: 8px;
            text-align: center;
            margin-bottom: 15px;
        }

        .status.connected {
            background: #d4edda;
            color: #155724;
        }

        .status.connecting {
            background: #fff3cd;
            color: #856404;
        }

        .status.error {
            background: #f8d7da;
            color: #721c24;
        }

        .status.warning {
            background: #ffeaa7;
            color: #856404;
        }

        .chat-section {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            height: fit-content;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }

        .chat-header {
            text-align: center;
            margin-bottom: 20px;
            color: #2c3e50;
            font-size: 1.3em;
            font-weight: 600;
        }

        .chat-messages {
            height: 400px;
            overflow-y: auto;
            padding: 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            background: white;
            margin-bottom: 15px;
            scroll-behavior: smooth;
        }

        .chat-msg {
            margin: 8px 0;
            padding: 10px 15px;
            border-radius: 15px;
            max-width: 85%;
            word-wrap: break-word;
            animation: slideIn 0.3s ease;
        }

        .chat-msg.self {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            margin-left: auto;
            text-align: right;
            border-bottom-right-radius: 5px;
        }

        .chat-msg.remote {
            background: #e9ecef;
            color: #2c3e50;
            margin-right: auto;
            text-align: left;
            border-bottom-left-radius: 5px;
        }

        .chat-text {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .chat-time {
            font-size: 0.8em;
            opacity: 0.7;
            display: block;
            font-weight: 400;
        }

        .chat-input-container {
            display: flex;
            gap: 10px;
        }

        .chat-input {
            flex: 1;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s;
        }

        .chat-input:focus {
            border-color: #667eea;
        }

        .chat-send-btn {
            padding: 12px 20px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
        }

        .chat-send-btn:hover {
            background: #5a67d8;
            transform: scale(1.05);
        }

        .logs {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
            height: 200px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            line-height: 1.4;
        }

        .call-info {
            background: #667eea;
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
            display: none;
        }

        .audio-indicator {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(231, 76, 60, 0.9);
            color: white;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: 600;
            display: none;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @media (max-width: 1200px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .video-container {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .video-wrapper {
                aspect-ratio: 16/9;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎥 WebRTC Video Call</h1>
            <p>High-quality video calling with real-time chat</p>
        </div>

        <div class="main-content">
            <div class="video-section">
                <!-- Permission Status -->
                <div id="permissionStatus" class="permission-box">
                    🎥 Click 'Test Camera' to grant permissions first
                </div>

                <!-- Controls Panel -->
                <div class="controls-panel">
                    <div class="input-group">
                        <label for="userId">Your User ID:</label>
                        <input type="text" id="userId" placeholder="Enter your unique ID">
                    </div>

                    <div class="input-group">
                        <label for="receiverId">Call User ID:</label>
                        <input type="text" id="receiverId" placeholder="Enter user ID to call">
                    </div>

                    <div class="input-group">
                        <label for="callDuration">Auto-end call after (minutes):</label>
                        <select id="callDuration">
                            <option value="1">1 minute</option>
                            <option value="2" selected>2 minutes</option>
                            <option value="5">5 minutes</option>
                            <option value="10">10 minutes</option>
                            <option value="30">30 minutes</option>
                        </select>
                    </div>

                    <div style="text-align: center;">
                        <button class="btn btn-primary" onclick="testCameraPermission()">🎥 Test Camera</button>
                        <button class="btn btn-success" onclick="connectUser()">🔗 Connect</button>
                        <button class="btn btn-primary" onclick="initiateCall()">📞 Start Call</button>
                    </div>

                    <div style="text-align: center; margin-top: 15px;">
                        <button class="btn btn-success" onclick="acceptCall()">✅ Accept</button>
                        <button class="btn btn-danger" onclick="rejectCall()">❌ Reject</button>
                        <button class="btn btn-warning" onclick="cancelCall()">🛑 Cancel</button>
                        <button class="btn btn-danger" onclick="endCall()">📴 End Call</button>
                    </div>
                </div>

                <!-- Call Info -->
                <div id="callIdHolder" class="call-info"></div>

                <!-- Status -->
                <div id="status" class="status">Ready - Test camera first, then connect</div>

                <!-- Status Indicators -->
                <div class="status-indicators">
                    <div class="status-item">
                        <div>📹 Local Camera</div>
                        <div id="localStatus">Waiting</div>
                    </div>
                    <div class="status-item">
                        <div>📺 Remote Video</div>
                        <div id="remoteStatus">Waiting for connection</div>
                    </div>
                </div>

                <!-- Video Container -->
                <div class="video-container">
                    <div class="video-wrapper">
                        <video id="localVideo" autoplay muted playsinline></video>
                        <div id="localVideoOff" class="video-overlay">
                            📹 Your Camera (Off)
                        </div>
                        <div class="video-controls">
                            <button id="localVideoBtn" class="control-btn video-off" onclick="toggleLocalVideo()">📹</button>
                            <button id="localAudioBtn" class="control-btn audio-off" onclick="toggleLocalAudio()">🎤</button>
                        </div>
                        <div id="localAudioMuted" class="audio-indicator">🔇 Muted</div>
                    </div>

                    <div class="video-wrapper">
                        <video id="remoteVideo" autoplay playsinline></video>
                        <div id="remoteVideoOff" class="video-overlay" style="display: none;">
                            📹 Remote Camera (Off)
                        </div>
                        <div id="remoteAudioMuted" class="audio-indicator">🔇 Remote Muted</div>
                    </div>
                </div>

                <!-- Logs -->
                <pre id="logs" class="logs">🚀 WebRTC Video Call Interface Ready - With Camera/Mic Controls
</pre>
            </div>

            <!-- Chat Section -->
            <div class="chat-section">
                <div class="chat-header">💬 Chat Messages</div>
                <div id="chatMessages" class="chat-messages"></div>
                <div class="chat-input-container">
                    <input type="text" id="chatInput" class="chat-input" placeholder="Type your message..." onkeypress="handleChatKeypress(event)">
                    <button class="chat-send-btn" onclick="sendChatMessage()">Send</button>
                </div>
            </div>
        </div>
    </div>

  <script>
    let socket;
let peerConnection;
let localStream;
let currentCallId = null;
let targetUserId = null;
let callTimer;
let isCallInitiator = false;
let permissionGranted = false;
let iceCandidateQueue = [];

// Media state tracking
let localVideoEnabled = false;
let localAudioEnabled = false;
let remoteVideoEnabled = true;
let remoteAudioEnabled = true;

const config = {
    iceServers: [
        { urls: "stun:stun.l.google.com:19302" },
        { urls: "stun:stun1.l.google.com:19302" },
        { urls: "stun:stun.services.mozilla.com" },
        { urls: "stun:stun2.l.google.com:19302" }
    ],
    iceCandidatePoolSize: 10
};

function log(msg) {
    const logs = document.getElementById("logs");
    const timestamp = new Date().toLocaleTimeString();
    logs.textContent += `[${timestamp}] ${msg}\n`;
    logs.scrollTop = logs.scrollHeight;
    console.log(`[WebRTC] ${msg}`);
}

function updateStatus(text, className = "") {
    const statusEl = document.getElementById("status");
    statusEl.textContent = text;
    statusEl.className = `status ${className}`;
}

function updateLocalStatus(text) {
    document.getElementById("localStatus").textContent = text;
}

function updateRemoteStatus(text) {
    document.getElementById("remoteStatus").textContent = text;
}

function updatePermissionStatus(text, granted = false) {
    const permEl = document.getElementById("permissionStatus");
    permEl.textContent = text;
    if (granted) {
        permEl.className = "permission-box permission-granted";
    } else {
        permEl.className = "permission-box";
    }
}

// Media control functions
function toggleLocalVideo() {
    if (!localStream) {
        alert("Please start camera first!");
        return;
    }

    const videoTrack = localStream.getVideoTracks()[0];
    if (videoTrack) {
        localVideoEnabled = !localVideoEnabled;
        videoTrack.enabled = localVideoEnabled;
        
        // Update UI
        const btn = document.getElementById("localVideoBtn");
        const overlay = document.getElementById("localVideoOff");
        
        if (localVideoEnabled) {
            btn.className = "control-btn video-on";
            btn.innerHTML = "📹";
            overlay.style.display = "none";
            updateLocalStatus("Camera on");
        } else {
            btn.className = "control-btn video-off";
            btn.innerHTML = "📹";
            overlay.style.display = "flex";
            updateLocalStatus("Camera off");
        }

        // Notify remote user
        if (socket && targetUserId) {
            socket.emit("media-state", {
                to: targetUserId,
                video: localVideoEnabled,
                audio: localAudioEnabled
            });
        }

        log(`📹 Local video ${localVideoEnabled ? 'enabled' : 'disabled'}`);
    }
}

function toggleLocalAudio() {
    if (!localStream) {
        alert("Please start camera first!");
        return;
    }

    const audioTrack = localStream.getAudioTracks()[0];
    if (audioTrack) {
        localAudioEnabled = !localAudioEnabled;
        audioTrack.enabled = localAudioEnabled;
        
        // Update UI
        const btn = document.getElementById("localAudioBtn");
        const indicator = document.getElementById("localAudioMuted");
        
        if (localAudioEnabled) {
            btn.className = "control-btn audio-on";
            btn.innerHTML = "🎤";
            indicator.style.display = "none";
        } else {
            btn.className = "control-btn audio-off";
            btn.innerHTML = "🎤";
            indicator.style.display = "block";
        }

        // Notify remote user
        if (socket && targetUserId) {
            socket.emit("media-state", {
                to: targetUserId,
                video: localVideoEnabled,
                audio: localAudioEnabled
            });
        }

        log(`🎤 Local audio ${localAudioEnabled ? 'enabled' : 'disabled'}`);
    }
}

function updateRemoteMediaState(video, audio) {
    remoteVideoEnabled = video;
    remoteAudioEnabled = audio;

    // Update remote video display
    const remoteVideoOverlay = document.getElementById("remoteVideoOff");
    const remoteAudioIndicator = document.getElementById("remoteAudioMuted");

    if (remoteVideoEnabled) {
        remoteVideoOverlay.style.display = "none";
    } else {
        remoteVideoOverlay.style.display = "flex";
    }

    if (remoteAudioEnabled) {
        remoteAudioIndicator.style.display = "none";
    } else {
        remoteAudioIndicator.style.display = "block";
    }

    log(`📡 Remote media state - Video: ${video ? 'on' : 'off'}, Audio: ${audio ? 'on' : 'off'}`);
}

// Test camera permission function
async function testCameraPermission() {
    try {
        updatePermissionStatus("🎥 Testing camera permission...", false);
        log("🎥 Testing camera access...");

        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
        }

        localStream = await navigator.mediaDevices.getUserMedia({
            video: {
                width: { ideal: 640, max: 1280 },
                height: { ideal: 480, max: 720 },
                facingMode: 'user'
            },
            audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true
            }
        });

        const localVideo = document.getElementById("localVideo");
        localVideo.srcObject = localStream;
        
        // Initially turn off video and audio
        localVideoEnabled = false;
        localAudioEnabled = false;
        
        const videoTrack = localStream.getVideoTracks()[0];
        const audioTrack = localStream.getAudioTracks()[0];
        
        if (videoTrack) videoTrack.enabled = false;
        if (audioTrack) audioTrack.enabled = false;
        
        // Update UI to show off state
        document.getElementById("localVideoBtn").className = "control-btn video-off";
        document.getElementById("localAudioBtn").className = "control-btn audio-off";
        document.getElementById("localVideoOff").style.display = "flex";
        document.getElementById("localAudioMuted").style.display = "block";
        
        updateLocalStatus("Camera & mic ready (off)");
        updatePermissionStatus("✅ Camera & Microphone permissions granted! Ready for calls.", true);
        
        permissionGranted = true;
        log(`✅ Camera permission granted - ${localStream.getTracks().length} tracks available (initially off)`);
        
    } catch (error) {
        log(`❌ Camera permission error: ${error.message}`);
        updatePermissionStatus("❌ Camera permission denied. Please allow camera access!", false);
        updateLocalStatus("Permission denied");
        alert(`Camera access failed: ${error.message}\n\nPlease:\n1. Allow camera permission\n2. Refresh page if needed`);
        permissionGranted = false;
    }
}

async function connectUser() {
    const userId = document.getElementById("userId").value.trim();
    if (!userId) return alert("Please enter your User ID first!");

    if (!permissionGranted) {
        alert("Please test camera permission first!");
        return;
    }

    if (socket) {
        socket.disconnect();
    }

    // For demo purposes, we'll simulate a socket connection
    socket = {
        connected: true,
        id: 'demo-socket-' + Math.random().toString(36).substr(2, 9),
        emit: function(event, data) {
            log(`📤 Socket emit: ${event} - ${JSON.stringify(data)}`);
        },
        on: function(event, callback) {
            log(`📥 Socket listener registered: ${event}`);
        },
        disconnect: function() {
            this.connected = false;
            log("🔌 Socket disconnected");
        }
    };

    log(`✅ Connected to server with socket ID: ${socket.id}`);
    updateStatus("✅ Connected to server (demo mode)", "connected");
    log(`📝 Registered as user: ${userId}`);
}

async function initiateCall() {
    const callerId = document.getElementById("userId").value.trim();
    const receiverId = document.getElementById("receiverId").value.trim();
    
    if (!callerId || !receiverId) {
        return alert("Please enter both User IDs!");
    }
    
    if (!socket || !socket.connected) {
        return alert("Please connect to server first!");
    }

    if (!permissionGranted || !localStream) {
        alert("Please test camera permission first!");
        return;
    }

    try {
        log(`📞 Starting video call to ${receiverId}...`);
        updateStatus("📞 Initiating call...", "connecting");
        
        isCallInitiator = true;
        targetUserId = receiverId;

        await createPeerConnection();
        log("🔗 Peer connection created with local stream");

        const offer = await peerConnection.createOffer({
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        });
        
        await peerConnection.setLocalDescription(offer);
        log("📡 Local description set with offer");

        log("📤 Offer sent to remote user");
        updateStatus("📤 Calling... (Camera ready)", "connecting");

        // Simulate call acceptance for demo
        setTimeout(() => {
            log("✅ Call accepted (demo)");
            updateStatus("✅ Call Active", "connected");
            startAutoEndTimer();
        }, 2000);

    } catch (error) {
        log(`❌ Error initiating call: ${error.message}`);
        updateStatus("❌ Call failed", "error");
        resetCall();
    }
}

async function createPeerConnection() {
    try {
        peerConnection = new RTCPeerConnection(config);
        
        // Add local stream tracks
        if (localStream) {
            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
                log(`➕ Added ${track.kind} track to peer connection`);
            });
        } else {
            log("⚠️ No local stream available");
        }

        // Handle incoming stream
        peerConnection.ontrack = (event) => {
            log(`📥 Received remote ${event.track.kind} track`);
            const remoteVideo = document.getElementById("remoteVideo");
            if (event.streams && event.streams[0]) {
                remoteVideo.srcObject = event.streams[0];
                updateRemoteStatus("Remote video connected");
                log("📺 Remote video stream set");
            }
        };

        // Handle ICE candidates
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                log("🧊 Generated ICE candidate");
                if (socket && targetUserId) {
                    socket.emit("ice-candidate", {
                        candidate: event.candidate,
                        to: targetUserId
                    });
                }
            } else {
                log("🧊 ICE candidate gathering complete");
            }
        };

        // Handle connection state changes
        peerConnection.onconnectionstatechange = () => {
            const state = peerConnection.connectionState;
            log(`🔗 Connection state: ${state}`);
            
            switch (state) {
                case 'connected':
                    updateStatus("✅ Connected", "connected");
                    break;
                case 'disconnected':
                    updateStatus("🔌 Disconnected", "warning");
                    break;
                case 'failed':
                    updateStatus("❌ Connection failed", "error");
                    resetCall();
                    break;
            }
        };

        log("🔗 Peer connection created successfully");
        return peerConnection;

    } catch (error) {
        log(`❌ Error creating peer connection: ${error.message}`);
        throw error;
    }
}

async function processIceCandidateQueue() {
    while (iceCandidateQueue.length > 0) {
        const candidate = iceCandidateQueue.shift();
        try {
            await peerConnection.addIceCandidate(candidate);
            log("🧊 Processed queued ICE candidate");
        } catch (error) {
            log(`❌ Error processing ICE candidate: ${error.message}`);
        }
    }
}

async function handleAnswer(answer) {
    try {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
        log("📡 Remote description set from answer");
        
        await processIceCandidateQueue();
        
        updateStatus("📡 Connection established", "connected");
        log("✅ WebRTC connection established");

    } catch (error) {
        log(`❌ Error handling answer: ${error.message}`);
        updateStatus("❌ Connection failed", "error");
    }
}

// Complete the missing handleIceCandidate function
async function handleIceCandidate(candidate) {
    try {
        if (peerConnection && peerConnection.remoteDescription) {
            await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
            log("🧊 Added ICE candidate");
        } else {
            log("🧊 Queuing ICE candidate (no remote description yet)");
            iceCandidateQueue.push(new RTCIceCandidate(candidate));
        }
    } catch (error) {
        log(`❌ Error handling ICE candidate: ${error.message}`);
    }
}

// Handle incoming call offer
async function handleOffer(offer, callerId) {
    try {
        log(`📞 Incoming call from ${callerId}`);
        
        if (!permissionGranted || !localStream) {
            log("❌ Camera permission not granted, cannot accept call");
            return;
        }

        isCallInitiator = false;
        targetUserId = callerId;
        
        await createPeerConnection();
        
        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        log("📡 Remote description set from offer");
        
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        log("📡 Local description set with answer");
        
        // Send answer back
        if (socket) {
            socket.emit("call-answer", {
                answer: answer,
                to: callerId
            });
        }
        
        await processIceCandidateQueue();
        
        updateStatus("📞 Call accepted", "connected");
        log("✅ Call accepted and answer sent");
        
    } catch (error) {
        log(`❌ Error handling call offer: ${error.message}`);
        updateStatus("❌ Call failed", "error");
    }
}

// End call function
function endCall() {
    log("📴 Ending call...");
    
    if (callTimer) {
        clearInterval(callTimer);
        callTimer = null;
    }
    
    if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
    }
    
    if (socket && targetUserId) {
        socket.emit("call-end", { to: targetUserId });
    }
    
    resetCall();
    updateStatus("📴 Call ended", "warning");
    log("✅ Call ended successfully");
}

// Reset call state
function resetCall() {
    currentCallId = null;
    targetUserId = null;
    isCallInitiator = false;
    iceCandidateQueue = [];
    
    // Clear remote video
    const remoteVideo = document.getElementById("remoteVideo");
    if (remoteVideo) {
        remoteVideo.srcObject = null;
    }
    
    updateRemoteStatus("No remote connection");
    
    // Reset remote media indicators
    const remoteVideoOverlay = document.getElementById("remoteVideoOff");
    const remoteAudioIndicator = document.getElementById("remoteAudioMuted");
    
    if (remoteVideoOverlay) remoteVideoOverlay.style.display = "flex";
    if (remoteAudioIndicator) remoteAudioIndicator.style.display = "none";
    
    if (callTimer) {
        clearInterval(callTimer);
        callTimer = null;
    }
}

// Auto-end timer for demo purposes
function startAutoEndTimer() {
    let seconds = 0;
    callTimer = setInterval(() => {
        seconds++;
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        const timeString = `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
        
        // Update call duration display if element exists
        const durationEl = document.getElementById("callDuration");
        if (durationEl) {
            durationEl.textContent = `Call Duration: ${timeString}`;
        }
        
        // Auto-end after 30 seconds for demo
        if (seconds >= 30) {
            log("⏰ Demo call auto-ending after 30 seconds");
            endCall();
        }
    }, 1000);
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    log("🚀 WebRTC Video Call App initialized");
    updateStatus("🔌 Ready to connect", "ready");
    updateLocalStatus("Camera not started");
    updateRemoteStatus("No remote connection");
    updatePermissionStatus("📷 Camera permission not tested", false);
});


  </script>
</body>
</html>