<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CallSpace - Professional Video Conference</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      height: 100vh;
      overflow: hidden;
    }

    .call-container {
      height: 100vh;
      display: flex;
      flex-direction: column;
      background: rgba(0, 0, 0, 0.3);
      backdrop-filter: blur(10px);
    }

    /* Header */
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px 30px;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(20px);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .meeting-info {
      display: flex;
      align-items: center;
      gap: 20px;
    }

    .room-id {
      background: rgba(255, 255, 255, 0.2);
      padding: 8px 16px;
      border-radius: 20px;
      font-weight: 600;
      font-size: 14px;
    }

    .timer {
      display: flex;
      align-items: center;
      gap: 8px;
      font-family: 'Courier New', monospace;
      font-size: 16px;
      font-weight: 600;
    }

    .recording-dot {
      width: 8px;
      height: 8px;
      background: #ff4757;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }

    .participants-count {
      display: flex;
      align-items: center;
      gap: 8px;
      background: rgba(255, 255, 255, 0.15);
      padding: 8px 14px;
      border-radius: 15px;
      font-size: 14px;
    }

    /* Main Content */
    .main-content {
      flex: 1;
      display: grid;
      grid-template-columns: 1fr 350px;
      gap: 0;
      overflow: hidden;
    }

    /* Video Section */
    .video-section {
      position: relative;
      background: rgba(0, 0, 0, 0.2);
      display: flex;
      flex-direction: column;
    }

    .videos {
      flex: 1;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 15px;
      padding: 20px;
      overflow-y: auto;
    }

    .video-tile {
      position: relative;
      background: #1a1a2e;
      border-radius: 16px;
      overflow: hidden;
      aspect-ratio: 16/10;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      border: 2px solid transparent;
      transition: all 0.3s ease;
    }

    .video-tile:hover {
      border-color: rgba(255, 255, 255, 0.3);
      transform: translateY(-2px);
    }

    .video-tile.speaking {
      border-color: #00d4aa;
      box-shadow: 0 0 20px rgba(0, 212, 170, 0.4);
    }

    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      background: linear-gradient(45deg, #1a1a2e, #16213e);
      border-radius: 16px;
    }

    .video-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
      padding: 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .participant-name {
      font-weight: 600;
      font-size: 14px;
    }

    .participant-status {
      display: flex;
      gap: 8px;
    }

    .status-icon {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
    }

    .mic-off { background: #ff4757; }
    .video-off { background: #5f27cd; }

    /* Control Bar */
    .control-bar {
      position: absolute;
      bottom: 30px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 15px;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(20px);
      padding: 15px 25px;
      border-radius: 25px;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .control-btn {
      width: 50px;
      height: 50px;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
      transition: all 0.3s ease;
      position: relative;
      color: white;
    }

    .control-btn.mic { background: #10ac84; }
    .control-btn.mic.muted { background: #ff4757; }
    .control-btn.video { background: #3742fa; }
    .control-btn.video.off { background: #747d8c; }
    .control-btn.screen { background: #7bed9f; color: #2c2c54; }
    .control-btn.screen.active { background: #70a1ff; color: white; }
    .control-btn.end { background: #ff4757; }
    .control-btn.settings { background: #a4b0be; }

    .control-btn:hover {
      transform: scale(1.1);
    }

    .control-btn:active {
      transform: scale(0.95);
    }

    /* Right Panel */
    .right-panel {
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(20px);
      border-left: 1px solid rgba(255, 255, 255, 0.1);
      display: flex;
      flex-direction: column;
    }
    .close-panel-btn {
  display: none;
  position: absolute;
  top: 15px;
  right: 15px;
  background: rgba(255, 255, 255, 0.2);
  border: none;
  color: white;
  font-size: 18px;
  padding: 4px 10px;
  border-radius: 8px;
  cursor: pointer;
  z-index: 1001;
}

@media (max-width: 1024px) {
  .close-panel-btn {
    display: block;
  }
}



    .panel-tabs {
      display: flex;
      background: rgba(255, 255, 255, 0.05);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .tab-btn {
      flex: 1;
      padding: 15px;
      border: none;
      background: transparent;
      color: rgba(255, 255, 255, 0.7);
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 14px;
      font-weight: 500;
    }

    .tab-btn.active {
      color: #ffffff;
      background: rgba(255, 255, 255, 0.1);
      border-bottom: 2px solid #70a1ff;
    }

    .tab-content {
      flex: 1;
      overflow: hidden;
      display: none;
    }

    .tab-content.active {
      display: flex;
      flex-direction: column;
    }

    /* Chat Section */
    .chat-section {
      flex: 1;
      display: flex;
      flex-direction: column;
      padding: 20px;
    }

    #chatBox {
      flex: 1;
      overflow-y: auto;
      margin-bottom: 15px;
      padding-right: 10px;
      font-size: 14px;
      line-height: 1.5;
    }

    #chatBox div {
      margin-bottom: 10px;
      padding: 8px 12px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 12px;
      word-wrap: break-word;
      animation: fadeInUp 0.3s ease;
    }

    @keyframes fadeInUp {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .chat-input-container {
      display: flex;
      gap: 10px;
      align-items: center;
    }

    #chatInput {
      flex: 1;
      padding: 12px 16px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 20px;
      background: rgba(255, 255, 255, 0.1);
      color: #ffffff;
      font-size: 14px;
      outline: none;
      transition: all 0.3s ease;
    }

    #chatInput:focus {
      border-color: #70a1ff;
      background: rgba(255, 255, 255, 0.15);
    }

    .send-btn {
      width: 40px;
      height: 40px;
      border: none;
      border-radius: 50%;
      background: #70a1ff;
      color: white;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
    }

    .send-btn:hover {
      background: #5352ed;
      transform: scale(1.05);
    }

    /* Whiteboard Section */
    .whiteboard-section {
      flex: 1;
      display: flex;
      flex-direction: column;
      padding: 20px;
    }

    .controls {
      display: flex;
      gap: 10px;
      margin-bottom: 15px;
      flex-wrap: wrap;
      align-items: center;
    }

    .controls select,
    .controls input[type="color"],
    .controls input[type="range"] {
      padding: 8px 12px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.1);
      color: #ffffff;
      cursor: pointer;
      font-size: 12px;
      transition: all 0.3s ease;
    }

    .controls select:focus,
    .controls input:focus {
      border-color: #70a1ff;
      background: rgba(255, 255, 255, 0.15);
      outline: none;
    }

    #colorPicker {
      width: 35px;
      height: 35px;
      padding: 0;
      border-radius: 8px;
    }

    #brushSize {
      width: 80px;
    }

    #clearBtn {
      padding: 8px 12px;
      border: none;
      border-radius: 8px;
      background: #ff4757;
      color: white;
      cursor: pointer;
      font-size: 12px;
      transition: all 0.3s ease;
    }

    #clearBtn:hover {
      background: #ff3838;
      transform: scale(1.05);
    }

    #whiteboard {
      flex: 1;
      border: 2px dashed rgba(255, 255, 255, 0.3);
      border-radius: 12px;
      background: rgba(255, 255, 255, 0.05);
      cursor: crosshair;
    }

    #status {
      padding: 8px 12px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      font-size: 12px;
      text-align: center;
      margin-bottom: 10px;
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .main-content {
        grid-template-columns: 1fr;
      }
      
      .right-panel {
        position: fixed;
        top: 0;
        right: -350px;
        width: 350px;
        height: 100vh;
        z-index: 1000;
        transition: right 0.3s ease;
      }
      
      .right-panel.open {
        right: 0;
      }
      
      .mobile-toggle {
        display: block !important;
      }
    }

    @media (max-width: 768px) {
      .videos {
        grid-template-columns: 1fr;
        padding: 15px;
      }
      
      .control-bar {
        bottom: 20px;
        padding: 12px 20px;
      }
      
      .control-btn {
        width: 45px;
        height: 45px;
        font-size: 16px;
      }
      
      .header {
        padding: 15px 20px;
      }
      
      .meeting-info {
        gap: 15px;
      }
    }

    .mobile-toggle {
      display: none;
      background: rgba(255, 255, 255, 0.2);
      border: none;
      color: white;
      padding: 8px 12px;
      border-radius: 8px;
      cursor: pointer;
    }
  </style>
</head>
<body>
<div id="app">
    <!-- Header -->
    <div class="header">
      <div class="meeting-info">
        <div class="room-id">
          <i class="fas fa-lock"></i> Room: <strong id="roomId">#loading...</strong>
        </div>
        <div class="timer">
          <div class="recording-dot"></div>
          <span id="callTimer">00:00</span>
        </div>
      </div>
      <div class="participants-count">
        <i class="fas fa-users"></i>
        <span id="participantCount">0 participants</span>
        <button class="mobile-toggle" onclick="togglePanel()">
          <i class="fas fa-bars"></i>
        </button>
      </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
      <!-- Video Section -->
      <div class="video-section">
        <div class="videos" id="videosContainer">
          <div class="video-tile">
            <video id="localVideo" autoplay muted playsinline></video>
            <div class="video-overlay">
              <span class="participant-name">You</span>
              <div class="participant-status">
                <div class="status-icon mic-off" id="localMicStatus">
                  <i class="fas fa-microphone-slash"></i>
                </div>
                <div class="status-icon video-off" id="localVideoStatus" style="display: none;">
                  <i class="fas fa-video-slash"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Control Bar -->
<!-- Control Bar -->
<div class="control-bar">
  <button class="control-btn mic muted" id="micBtn" onclick="toggleAudio()" title="Unmute">
    <i class="fas fa-microphone-slash"></i>
  </button>
  <button class="control-btn video" id="videoBtn" onclick="toggleVideo()" title="Turn off camera">
    <i class="fas fa-video"></i>
  </button>
  <button class="control-btn screen" id="screenBtn" onclick="startScreenShare()" title="Share screen">
    <i class="fas fa-desktop"></i>
  </button>
  <button class="control-btn settings" onclick="togglePanel()" title="Toggle panel">
    <i class="fas fa-cog"></i>
  </button>
  <button class="control-btn end" onclick="endCall()" title="End call">
    <i class="fas fa-phone-slash"></i>
  </button>
<button id="startRecordBtn" onclick="startRecording()">🎥 Start Recording</button>
<button id="stopRecordBtn" onclick="stopRecording()" style="display:none;">🛑 Stop Recording</button>
<a id="downloadLink" href="#" style="display: none;" download>⬇️ Download Recording</a>



</div>

<!-- Optional Preview and Recorded Video Display -->

     
      </div>

      <!-- Right Panel -->
      <div class="right-panel" id="rightPanel">
        <button class="close-panel-btn" onclick="togglePanel()">✕</button>

        <div class="panel-tabs">
          <button class="tab-btn active" onclick="switchTab('chat')">
            <i class="fas fa-comments"></i> Chat
          </button>
          <button class="tab-btn" onclick="switchTab('whiteboard')">
            <i class="fas fa-chalkboard"></i> Board
          </button>
        </div>

        <!-- Chat Tab -->
        <div class="tab-content active" id="chatTab">
          <div class="chat-section">
            <div id="chatBox"></div>
            <div class="chat-input-container">
              <input type="text" id="chatInput" placeholder="Type a message..." 
                     onkeydown="if(event.key==='Enter') sendMessage(this.value)">
              <button class="send-btn" onclick="sendMessage(document.getElementById('chatInput').value)">
                <i class="fas fa-paper-plane"></i>
              </button>
            </div>
          </div>
        </div>

        <!-- Whiteboard Tab -->
        <div class="tab-content" id="whiteboardTab">
          <div class="whiteboard-section">
            <div id="status">Selected Tool: pencil</div>
            <div class="controls">
              <select id="toolSelect">
                <option value="pencil">Pencil</option>
                <option value="brush">Brush</option>
                <option value="eraser">Eraser</option>
                <option value="line">Line</option>
                <option value="rectangle">Rectangle</option>
                <option value="circle">Circle</option>
                <option value="text">Text</option>
              </select>
              <input type="color" id="colorPicker" value="#ffffff">
              <input type="range" id="brushSize" min="1" max="40" value="5">
              <button id="clearBtn">Clear</button>
            </div>
            <canvas id="whiteboard" width="800" height="600"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    // Get room from URL or default
    const urlParams = new URLSearchParams(window.location.search);
    const room = urlParams.get('room') || 'default-room';
    document.getElementById('roomId').innerText = '#' + room;

    const localVideo = document.getElementById('localVideo');
    const videosContainer = document.querySelector('.videos');
    const chatBox = document.getElementById('chatBox');


    let startTime;
    let audioMuted = false;
    let videoOn = true;
    let screenSharing = false;
    let participantCount = 0;
    let localStream;
    const peers = {}; // Store peer connections by userId


    const config = {
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    };

    // UI Functions
    function switchTab(tabName) {
      document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
      document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
      
      event.target.classList.add('active');
      document.getElementById(tabName + 'Tab').classList.add('active');
    }

    function togglePanel() {
      const panel = document.getElementById('rightPanel');
      panel.classList.toggle('open');
    }

    function updateParticipantCount() {
      participantCount = Object.keys(peers).length + 1; // +1 for local user
      document.getElementById('participantCount').textContent = `${participantCount} participant${participantCount !== 1 ? 's' : ''}`;
    }

    // Get local media and join room
    (async () => {
      try {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        localVideo.srcObject = localStream;
        
        // Initially mute audio
        const audioTrack = localStream.getAudioTracks()[0];
        if (audioTrack) {
          audioTrack.enabled = false;
          audioMuted = true;
        }
        
        socket.emit('join', room);
      } catch (e) {
        alert('Could not access camera and microphone: ' + e.message);
      }
    })();

    socket.on('all-users', users => {
      users.forEach(userId => {
        createPeerConnection(userId, true);
      });
      updateParticipantCount();
      startTimer();
    });

    socket.on('user-joined', userId => {
      createPeerConnection(userId, false);
      updateParticipantCount();
    });

    socket.on('offer', async ({ from, offer }) => {
      const pc = createPeerConnection(from, false);
      await pc.setRemoteDescription(new RTCSessionDescription(offer));
      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      socket.emit('answer', { to: from, answer: pc.localDescription });
    });

    socket.on('answer', async ({ from, answer }) => {
      const pc = peers[from];
      if (!pc) return;
      await pc.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on('ice-candidate', ({ from, candidate }) => {
      const pc = peers[from];
      if (!pc) return;
      pc.addIceCandidate(new RTCIceCandidate(candidate));
    });

    socket.on('user-left', userId => {
      if (peers[userId]) {
        peers[userId].close();
        delete peers[userId];
      }
      const videoEl = document.getElementById('remoteVideo-' + userId);
      if (videoEl) {
        videoEl.srcObject = null;
        videoEl.parentNode.removeChild(videoEl);
      }
      updateParticipantCount();
    });

    // Chat message received
    socket.on('chat-message', ({ from, msg }) => {
      const you = from === socket.id ? 'You' : `User ${from.substring(0, 6)}`;
      chatBox.innerHTML += `<div><b>${you}:</b> ${msg}</div>`;
      chatBox.scrollTop = chatBox.scrollHeight;
    });

    // Create peer connection and set up handlers
    function createPeerConnection(userId, isInitiator) {
      if (peers[userId]) return peers[userId];

      const pc = new RTCPeerConnection(config);
      peers[userId] = pc;

      // Add local tracks to peer connection
      localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

      // Create video element for this remote user
      let remoteVideoContainer = document.getElementById('remoteVideo-' + userId);
      if (!remoteVideoContainer) {
        remoteVideoContainer = document.createElement('div');
        remoteVideoContainer.className = 'video-tile';
        remoteVideoContainer.id = 'remoteVideo-' + userId;
        
        const remoteVideo = document.createElement('video');
        remoteVideo.autoplay = true;
        remoteVideo.playsInline = true;
        
        const overlay = document.createElement('div');
        overlay.className = 'video-overlay';
        overlay.innerHTML = `
          <span class="participant-name">User ${userId.substring(0, 6)}</span>
          <div class="participant-status"></div>
        `;
        
        remoteVideoContainer.appendChild(remoteVideo);
        remoteVideoContainer.appendChild(overlay);
        videosContainer.appendChild(remoteVideoContainer);
      }

      const remoteVideo = remoteVideoContainer.querySelector('video');
      const remoteStream = new MediaStream();
      remoteVideo.srcObject = remoteStream;

      pc.ontrack = event => {
        event.streams[0].getTracks().forEach(track => remoteStream.addTrack(track));
      };

      pc.onicecandidate = event => {
        if (event.candidate) {
          socket.emit('ice-candidate', { to: userId, candidate: event.candidate });
        }
      };

      if (isInitiator) {
        pc.createOffer().then(offer => {
          pc.setLocalDescription(offer).then(() => {
            socket.emit('offer', { to: userId, offer: pc.localDescription });
          });
        });
      }

      return pc;
    }

    // Chat message send
    function sendMessage(msg) {
      if (!msg || !msg.trim()) return;
      socket.emit('chat-message', { room, msg });
      chatBox.innerHTML += `<div style="text-align:right; color:#7fbf7f;"><b>You:</b> ${msg}</div>`;
      chatBox.scrollTop = chatBox.scrollHeight;
      document.getElementById('chatInput').value = '';
    }

    // Control functions
    function toggleAudio() {
      if (!localStream) return;
      const audioTrack = localStream.getAudioTracks()[0];
      audioTrack.enabled = !audioTrack.enabled;
      audioMuted = !audioTrack.enabled;
      
      const btn = document.getElementById('micBtn');
      const icon = btn.querySelector('i');
      const status = document.getElementById('localMicStatus');
      
      if (audioMuted) {
        btn.classList.add('muted');
        icon.className = 'fas fa-microphone-slash';
        btn.title = 'Unmute';
        status.style.display = 'flex';
      } else {
        btn.classList.remove('muted');
        icon.className = 'fas fa-microphone';
        btn.title = 'Mute';
        status.style.display = 'none';
      }
    }

    function toggleVideo() {
      if (!localStream) return;
      const videoTrack = localStream.getVideoTracks()[0];
      videoTrack.enabled = !videoTrack.enabled;
      videoOn = videoTrack.enabled;
      
      const btn = document.getElementById('videoBtn');
      const icon = btn.querySelector('i');
      const status = document.getElementById('localVideoStatus');
      
      if (videoOn) {
        btn.classList.remove('off');
        icon.className = 'fas fa-video';
        btn.title = 'Turn off camera';
        status.style.display = 'none';
      } else {
        btn.classList.add('off');
        icon.className = 'fas fa-video-slash';
        btn.title = 'Turn on camera';
        status.style.display = 'flex';
      }
    }

    async function startScreenShare() {
      try {
        if (!screenSharing) {
          const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });
          const screenTrack = screenStream.getVideoTracks()[0];

          // Replace track on each peer connection
          for (const userId in peers) {
            const sender = peers[userId].getSenders().find(s => s.track && s.track.kind === 'video');
            if (sender) sender.replaceTrack(screenTrack);
          }

          // Update local video preview
          localVideo.srcObject = screenStream;
          screenSharing = true;
          
          const btn = document.getElementById('screenBtn');
          const icon = btn.querySelector('i');
          btn.classList.add('active');
          icon.className = 'fas fa-stop';
          btn.title = 'Stop sharing';

          screenTrack.onended = () => {
            // Restore original camera video track
            for (const userId in peers) {
              const sender = peers[userId].getSenders().find(s => s.track && s.track.kind === 'video');
              if (sender) sender.replaceTrack(localStream.getVideoTracks()[0]);
            }
            localVideo.srcObject = localStream;
            screenSharing = false;
            btn.classList.remove('active');
            icon.className = 'fas fa-desktop';
            btn.title = 'Share screen';
          };
        }
      } catch (e) {
        alert('Screen share failed or cancelled.');
      }
    }

    function endCall() {
      if (confirm('Are you sure you want to end the call?')) {
        for (const userId in peers) {
          peers[userId].close();
          delete peers[userId];
          const videoEl = document.getElementById('remoteVideo-' + userId);
          if (videoEl) {
            videoEl.srcObject = null;
            videoEl.parentNode.removeChild(videoEl);
          }
        }
        if (localStream) {
          localStream.getTracks().forEach(track => track.stop());
        }
        socket.emit('leave', room);
        window.location.reload();
      }
    }

    // Call timer
    function startTimer() {
      startTime = Date.now();
      setInterval(() => {
        const diff = Date.now() - startTime;
        const mins = Math.floor(diff / 60000);
        const secs = Math.floor((diff % 60000) / 1000);
        document.getElementById('callTimer').innerText = `${mins}:${secs.toString().padStart(2, '0')}`;
      }, 1000);
    }

    // Whiteboard drawing and tools
// Whiteboard drawing and tools
document.addEventListener('DOMContentLoaded', () => {
  const canvas = document.getElementById('whiteboard');
  const ctx = canvas.getContext('2d');
  const clearBtn = document.getElementById('clearBtn');
  const statusEl = document.getElementById('status');
  const colorPicker = document.getElementById('colorPicker');
  const brushSizeInput = document.getElementById('brushSize');
  const toolSelect = document.getElementById('toolSelect');
  
  // Fix: Define roomId properly (get from URL params or set manually)
  const urlParams = new URLSearchParams(window.location.search);
  const roomId = urlParams.get('room') || 'default-room';

  let drawing = false;
  let startX = 0;
  let startY = 0;
  let currentTool = toolSelect.value;
  let currentColor = colorPicker.value;
  let brushSize = parseInt(brushSizeInput.value, 10);
  let textInputActive = false;
  let drawingPath = []; // Fix: Store path for continuous drawing

  function getMousePos(evt) {
    const rect = canvas.getBoundingClientRect();
    return {
      x: evt.clientX - rect.left,
      y: evt.clientY - rect.top
    };
  }

  canvas.addEventListener('mousedown', (evt) => {
    if (textInputActive) return;
    const pos = getMousePos(evt);
    drawing = true;
    startX = pos.x;
    startY = pos.y;
    
    // Fix: Initialize drawing path
    drawingPath = [{x: startX, y: startY}];
    
    ctx.beginPath();
    ctx.moveTo(startX, startY);
    ctx.strokeStyle = currentColor;
    ctx.lineWidth = brushSize;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
  });

  canvas.addEventListener('mousemove', (evt) => {
    if (!drawing) return;
    const pos = getMousePos(evt);
    
    if (['pencil', 'brush', 'eraser'].includes(currentTool)) {
      // Fix: Add point to path for continuous drawing
      drawingPath.push({x: pos.x, y: pos.y});
      
      if (currentTool === 'eraser') {
        ctx.globalCompositeOperation = 'destination-out';
        ctx.beginPath();
        ctx.arc(pos.x, pos.y, brushSize / 2, 0, Math.PI * 2);
        ctx.fill();
      } else {
        ctx.globalCompositeOperation = 'source-over';
        ctx.lineTo(pos.x, pos.y);
        ctx.stroke();
      }
    }
  });

  canvas.addEventListener('mouseup', (evt) => {
    if (!drawing) return;
    drawing = false;
    const pos = getMousePos(evt);
    ctx.closePath();
    ctx.globalCompositeOperation = 'source-over';

    let text = undefined;

    if (currentTool === 'line') {
      ctx.beginPath();
      ctx.moveTo(startX, startY);
      ctx.lineTo(pos.x, pos.y);
      ctx.stroke();
      ctx.closePath();
    } else if (currentTool === 'rectangle') {
      ctx.beginPath();
      ctx.rect(startX, startY, pos.x - startX, pos.y - startY);
      ctx.stroke();
      ctx.closePath();
    } else if (currentTool === 'circle') {
      const radius = Math.hypot(pos.x - startX, pos.y - startY);
      ctx.beginPath();
      ctx.arc(startX, startY, radius, 0, Math.PI * 2);
      ctx.stroke();
      ctx.closePath();
    } else if (currentTool === 'text') {
      text = prompt('Enter text:');
      if (text) {
        ctx.fillStyle = currentColor;
        ctx.font = `${brushSize * 5}px sans-serif`;
        ctx.fillText(text, pos.x, pos.y);
      }
      textInputActive = false;
    }

    // Fix: Send complete drawing data
    const drawData = {
      roomId,
      tool: currentTool,
      color: currentColor,
      size: brushSize,
      startX,
      startY,
      endX: pos.x,
      endY: pos.y,
      path: drawingPath, // Fix: Include path for continuous drawing
      text
    };

    socket.emit('whiteboard-draw', drawData);
    drawingPath = []; // Reset path
  });

  canvas.addEventListener('mouseleave', () => {
    if (drawing) {
      drawing = false;
      ctx.closePath();
      ctx.globalCompositeOperation = 'source-over';
    }
  });

  toolSelect.addEventListener('change', (evt) => {
    currentTool = evt.target.value;
    statusEl.textContent = `Selected Tool: ${currentTool}`;
    textInputActive = currentTool === 'text';
    colorPicker.disabled = currentTool === 'eraser';
  });

  colorPicker.addEventListener('input', (evt) => {
    currentColor = evt.target.value;
    ctx.strokeStyle = currentColor;
    ctx.fillStyle = currentColor;
  });

  brushSizeInput.addEventListener('input', (evt) => {
    brushSize = parseInt(evt.target.value, 10);
    ctx.lineWidth = brushSize;
  });

  clearBtn.addEventListener('click', () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    socket.emit('whiteboard-clear', roomId);
  });

  // Fix: Handle incoming draw events properly
  socket.on('whiteboard-draw', (data) => {
    const { tool, color, size, startX, startY, endX, endY, text, path } = data;
    
    ctx.strokeStyle = color;
    ctx.fillStyle = color;
    ctx.lineWidth = size;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';

    if (tool === 'pencil' || tool === 'brush') {
      // Fix: Draw complete path for continuous lines
      if (path && path.length > 1) {
        ctx.beginPath();
        ctx.moveTo(path[0].x, path[0].y);
        for (let i = 1; i < path.length; i++) {
          ctx.lineTo(path[i].x, path[i].y);
        }
        ctx.stroke();
        ctx.closePath();
      }
    } else if (tool === 'eraser') {
      // Fix: Handle eraser path
      if (path && path.length > 0) {
        ctx.globalCompositeOperation = 'destination-out';
        for (let point of path) {
          ctx.beginPath();
          ctx.arc(point.x, point.y, size / 2, 0, Math.PI * 2);
          ctx.fill();
        }
        ctx.globalCompositeOperation = 'source-over';
      }
    } else if (tool === 'line') {
      ctx.beginPath();
      ctx.moveTo(startX, startY);
      ctx.lineTo(endX, endY);
      ctx.stroke();
      ctx.closePath();
    } else if (tool === 'rectangle') {
      ctx.beginPath();
      ctx.rect(startX, startY, endX - startX, endY - startY);
      ctx.stroke();
      ctx.closePath();
    } else if (tool === 'circle') {
      const radius = Math.hypot(endX - startX, endY - startY);
      ctx.beginPath();
      ctx.arc(startX, startY, radius, 0, Math.PI * 2);
      ctx.stroke();
      ctx.closePath();
    } else if (tool === 'text' && text) {
      ctx.font = `${size * 5}px sans-serif`;
      ctx.fillText(text, endX, endY);
    }
  });

  socket.on('whiteboard-clear', (receivedRoomId) => {
    if (receivedRoomId === roomId) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }
  });
});
  function togglePanel() {
    const panel = document.getElementById('rightPanel');
    panel.classList.toggle('open');
  }

  function switchTab(tab) {
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(tabContent => tabContent.classList.remove('active'));

    if (tab === 'chat') {
      document.querySelector('.tab-btn:nth-child(1)').classList.add('active');
      document.getElementById('chatTab').classList.add('active');
    } else if (tab === 'whiteboard') {
      document.querySelector('.tab-btn:nth-child(2)').classList.add('active');
      document.getElementById('whiteboardTab').classList.add('active');
    }

    // Optional: Auto-close panel on mobile after switching tab
    if (window.innerWidth <= 1024) {
      togglePanel();
    }
  }
function startRecording() {
  socket.emit('start-recording', { room });
  document.getElementById('startRecordBtn').style.display = 'none';
  document.getElementById('stopRecordBtn').style.display = 'inline-block';
}

function stopRecording() {
  socket.emit('stop-recording', { room });
  document.getElementById('stopRecordBtn').style.display = 'none';
  document.getElementById('startRecordBtn').style.display = 'inline-block';
}

socket.on('recording-available', (filename) => {
  const link = document.getElementById('downloadLink');
  link.href = `/recordings/${filename}`;
  link.innerText = '⬇️ Download Recording';
  link.style.display = 'inline-block';
});







  
</script>

</body>
</html>
