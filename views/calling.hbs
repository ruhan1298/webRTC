<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Call Room</title>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #121212;
      color: #e0e0e0;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }
    header {
      background: #1f1f1f;
      padding: 15px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-weight: 700;
      font-size: 1.2rem;
      letter-spacing: 1px;
    }
    #callTimer {
      font-family: 'Courier New', Courier, monospace;
      font-size: 1.2rem;
      background: #292929;
      padding: 8px 15px;
      border-radius: 8px;
      letter-spacing: 1.2px;
    }
    main {
      flex: 1;
      display: flex;
      flex-direction: column;
      padding: 20px 30px;
      gap: 15px;
      background: #181818;
    }
    .videos {
      flex: 1;
      display: flex;
      gap: 20px;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
    }
    video {
      background: #000;
      border-radius: 12px;
      box-shadow: 0 0 12px rgba(0,0,0,0.8);
      width: 45%;
      max-height: 400px;
      object-fit: cover;
      border: 3px solid #3a8ee6;
    }
    .controls {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 10px;
    }
    .controls button {
      background: #3a8ee6;
      border: none;
      color: white;
      font-size: 1rem;
      padding: 12px 24px;
      border-radius: 10px;
      cursor: pointer;
      transition: background 0.3s ease;
      min-width: 140px;
    }
    .controls button:hover {
      background: #2a70c4;
    }
    #chatSection {
      background: #222;
      border-radius: 10px;
      padding: 15px;
      display: flex;
      flex-direction: column;
      height: 250px;
      max-width: 600px;
      margin: 0 auto 30px;
    #chatBox {
      flex: 1;
      overflow-y: auto;
      padding-right: 10px;
      color: #ddd;
      font-size: 0.95rem;
      line-height: 1.3rem;
      border-bottom: 1px solid #444;
    }
    #chatBox div {
      margin-bottom: 8px;
      word-wrap: break-word;
    }
    #chatInput {
      margin-top: 12px;
      padding: 10px 15px;
      border-radius: 8px;
      border: none;
      font-size: 1rem;
      outline: none;
      width: 100%;
      background: #333;
      color: #eee;
      box-sizing: border-box;
      transition: background 0.3s ease;
    }
    #chatInput:focus {
      background: #3a8ee6;
      color: white;
    }

    @media (max-width: 720px) {
      video {
        width: 100%;
        max-height: 250px;
      }
      .controls {
        flex-wrap: wrap;
        gap: 12px;
      }
      #chatSection {
        max-width: 100%;
        height: 200px;
      }
    }
  </style>
</head>
<body>
  <header>
    <div>Room ID: <strong>{{room}}</strong></div>
    <div id="callTimer">00:00</div>
  </header>

  <main>
    <div class="videos">
      <video id="localVideo" autoplay muted playsinline></video>
      <video id="remoteVideo" autoplay playsinline></video>
    </div>

    <div class="controls">
      <button onclick="toggleAudio()">Mute/Unmute</button>
      <button onclick="toggleVideo()">Camera On/Off</button>
      <button onclick="startScreenShare()">Share Screen</button>
      
    </div>

    <section id="chatSection">
      <div id="chatBox"></div>
      <input
        id="chatInput"
        placeholder="Type a message and press Enter..."
        autocomplete="off"
        onkeydown="if(event.key==='Enter') sendMessage(this.value)"
      />
    </section>
  </main>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const room = "{{room}}";

    const socket = io();
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    const chatBox = document.getElementById('chatBox');
    let localStream;
    let remoteStream;
    let peerConnection;
    let startTime;

    const config = {
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    };

    (async function init() {
      try {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        localVideo.srcObject = localStream;

        socket.emit('join', room);
      } catch (err) {
        alert('Could not access camera/microphone: ' + err.message);
      }
    })();

    socket.on('user-joined', async () => {
      createConnection();
      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      socket.emit('offer', { room, offer });
      startTimer();
    });

    socket.on('offer', async (offer) => {
      createConnection();
      await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
      const answer = await peerConnection.createAnswer();
      await peerConnection.setLocalDescription(answer);
      socket.emit('answer', { room, answer });
      startTimer();
    });

    socket.on('answer', async (answer) => {
      await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on('ice-candidate', (candidate) => {
      peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    });

    socket.on('chat-message', ({ msg }) => {
      chatBox.innerHTML += <div>${msg}</div>;
      chatBox.scrollTop = chatBox.scrollHeight;
    });

    function createConnection() {
      peerConnection = new RTCPeerConnection(config);

      peerConnection.onicecandidate = event => {
        if (event.candidate) {
          socket.emit('ice-candidate', { room, candidate: event.candidate });
        }
      };

      peerConnection.ontrack = event => {
        if (!remoteStream) {
          remoteStream = new MediaStream();
          remoteVideo.srcObject = remoteStream;
        }
        remoteStream.addTrack(event.track);
      };

      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
    }

    function toggleAudio() {
      const enabled = localStream.getAudioTracks()[0].enabled;
      localStream.getAudioTracks()[0].enabled = !enabled;
    }

    function toggleVideo() {
      const enabled = localStream.getVideoTracks()[0].enabled;
      localStream.getVideoTracks()[0].enabled = !enabled;
    }

    async function startScreenShare() {
      try {
        const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });
        const screenTrack = screenStream.getVideoTracks()[0];
        const sender = peerConnection.getSenders().find(s => s.track.kind === 'video');
        sender.replaceTrack(screenTrack);

        screenTrack.onended = () => {
          sender.replaceTrack(localStream.getVideoTracks()[0]);
        };
      } catch (err) {
        alert('Screen share failed or was cancelled.');
      }
    }

    function sendMessage(msg) {
      if (!msg.trim()) return;
      socket.emit('chat-message', { room, msg });
      chatBox.innerHTML += <div style="text-align:right; color:#7fbf7f;">You: ${msg}</div>;
      chatBox.scrollTop = chatBox.scrollHeight;
      document.getElementById('chatInput').value = '';
    }

    function startTimer() {
      startTime = Date.now();
      setInterval(() => {
        const diff = Date.now() - startTime;
        const mins = Math.floor(diff / 60000);
        const secs = Math.floor((diff % 60000) / 1000);
        document.getElementById('callTimer').innerText = ${mins}:${secs.toString().padStart(2, '0')};
      }, 1000);
    }
  </script>
</body>
</html>