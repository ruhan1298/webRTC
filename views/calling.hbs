<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Multi-User Call Room</title>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #121212;
      color: #e0e0e0;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }
    header {
      background: #1f1f1f;
      padding: 15px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-weight: 700;
      font-size: 1.2rem;
      letter-spacing: 1px;
    }
    #callTimer {
      font-family: 'Courier New', Courier, monospace;
      font-size: 1.2rem;
      background: #292929;
      padding: 8px 15px;
      border-radius: 8px;
      letter-spacing: 1.2px;
    }
    main {
      flex: 1;
      display: flex;
      flex-direction: column;
      padding: 20px 30px;
      gap: 15px;
      background: #181818;
    }
    .videos {
      flex: 1;
      display: flex;
      gap: 15px;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
      overflow-y: auto;
    }
    video {
      background: #000;
      border-radius: 12px;
      box-shadow: 0 0 12px rgba(0,0,0,0.8);
      width: 300px;
      max-height: 225px;
      object-fit: cover;
      border: 3px solid #3a8ee6;
    }
    .controls {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 10px;
      flex-wrap: wrap;
    }
    .controls button {
      background: #3a8ee6;
      border: none;
      color: white;
      font-size: 1rem;
      padding: 12px 24px;
      border-radius: 10px;
      cursor: pointer;
      transition: background 0.3s ease;
      min-width: 140px;
    }
    .controls button:hover {
      background: #2a70c4;
    }
    #chatSection {
      background: #222;
      border-radius: 10px;
      padding: 15px;
      display: flex;
      flex-direction: column;
      height: 250px;
      max-width: 600px;
      margin: 0 auto 30px;
    }
    #chatBox {
      flex: 1;
      overflow-y: auto;
      padding-right: 10px;
      color: #ddd;
      font-size: 0.95rem;
      line-height: 1.3rem;
      border-bottom: 1px solid #444;
    }
    #chatBox div {
      margin-bottom: 8px;
      word-wrap: break-word;
    }
    #chatInput {
      margin-top: 12px;
      padding: 10px 15px;
      border-radius: 8px;
      border: none;
      font-size: 1rem;
      outline: none;
      width: 100%;
      background: #333;
      color: #eee;
      box-sizing: border-box;
      transition: background 0.3s ease;
    }
    #chatInput:focus {
      background: #3a8ee6;
      color: white;
    }
    @media (max-width: 720px) {
      video {
        width: 100%;
        max-height: 250px;
      }
      .controls {
        flex-wrap: wrap;
        gap: 12px;
      }
      #chatSection {
        max-width: 100%;
        height: 200px;
      }
    }
  </style>
</head>
<body>
  <header>
    <div>Room ID: <strong id="roomId"></strong></div>
    <div id="callTimer">00:00</div>
  </header>

  <main>
    <div class="videos">
      <video id="localVideo" autoplay muted playsinline></video>
    </div>

    <div class="controls">
      <button onclick="toggleAudio()">Mute/Unmute</button>
      <button onclick="toggleVideo()">Camera On/Off</button>
      <button onclick="startScreenShare()">Share Screen</button>
      <button class="end" onclick="endCall()">End Call</button>
    </div>

    <section id="chatSection">
      <div id="chatBox"></div>
      <input
        id="chatInput"
        placeholder="Type a message and press Enter..."
        autocomplete="off"
        onkeydown="if(event.key==='Enter') sendMessage(this.value)"
      />
    </section>
  </main>

  <script src="/socket.io/socket.io.js"></script>
 <script>
  const socket = io();

  // Get room from URL or default
  const urlParams = new URLSearchParams(window.location.search);
  const room = urlParams.get('room') || 'default-room';
  document.getElementById('roomId').innerText = room;

  const localVideo = document.getElementById('localVideo');
  const videosContainer = document.querySelector('.videos');
  const chatBox = document.getElementById('chatBox');

  let localStream;
  const peers = {}; // socketId -> RTCPeerConnection
  let startTime;

  const config = {
    iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
  };

  // Get local media and join room
  (async () => {
    try {
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      localVideo.srcObject = localStream;
      socket.emit('join', room);
    } catch (e) {
      alert('Could not access camera and microphone: ' + e.message);
    }
  })();

  socket.on('all-users', users => {
    users.forEach(userId => {
      createPeerConnection(userId, true);
    });
    startTimer();
  });

  socket.on('user-joined', userId => {
    createPeerConnection(userId, false);
  });

  socket.on('offer', async ({ from, offer }) => {
    const pc = createPeerConnection(from, false);
    await pc.setRemoteDescription(new RTCSessionDescription(offer));
    const answer = await pc.createAnswer();
    await pc.setLocalDescription(answer);
    socket.emit('answer', { to: from, answer: pc.localDescription });
  });

  socket.on('answer', async ({ from, answer }) => {
    const pc = peers[from];
    if (!pc) return;
    await pc.setRemoteDescription(new RTCSessionDescription(answer));
  });

  socket.on('ice-candidate', ({ from, candidate }) => {
    const pc = peers[from];
    if (!pc) return;
    pc.addIceCandidate(new RTCIceCandidate(candidate));
  });

  socket.on('user-left', userId => {
    if (peers[userId]) {
      peers[userId].close();
      delete peers[userId];
    }
    const videoEl = document.getElementById('remoteVideo-' + userId);
    if (videoEl) {
      videoEl.srcObject = null;
      videoEl.parentNode.removeChild(videoEl);
    }
  });

  // Chat message received
  socket.on('chat-message', ({ from, msg }) => {
    const you = from === socket.id ? 'You' : `User ${from.substring(0, 6)}`;
    chatBox.innerHTML += `<div><b>${you}:</b> ${msg}</div>`;
    chatBox.scrollTop = chatBox.scrollHeight;
  });

  // Create peer connection and set up handlers
  function createPeerConnection(userId, isInitiator) {
    if (peers[userId]) return peers[userId];

    const pc = new RTCPeerConnection(config);
    peers[userId] = pc;

    // Add local tracks to peer connection
    localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

    // Create video element for this remote user
    let remoteVideo = document.getElementById('remoteVideo-' + userId);
    if (!remoteVideo) {
      remoteVideo = document.createElement('video');
      remoteVideo.id = 'remoteVideo-' + userId;
      remoteVideo.autoplay = true;
      remoteVideo.playsInline = true;
      remoteVideo.style.width = '300px';
      remoteVideo.style.border = '3px solid #3a8ee6';
      remoteVideo.style.borderRadius = '12px';
      remoteVideo.style.boxShadow = '0 0 12px rgba(0,0,0,0.8)';
      videosContainer.appendChild(remoteVideo);
    }

    const remoteStream = new MediaStream();
    remoteVideo.srcObject = remoteStream;

    pc.ontrack = event => {
      event.streams[0].getTracks().forEach(track => remoteStream.addTrack(track));
    };

    pc.onicecandidate = event => {
      if (event.candidate) {
        socket.emit('ice-candidate', { to: userId, candidate: event.candidate });
      }
    };

    if (isInitiator) {
      pc.createOffer().then(offer => {
        pc.setLocalDescription(offer).then(() => {
          socket.emit('offer', { to: userId, offer: pc.localDescription });
        });
      });
    }

    return pc;
  }

  // Chat message send
  function sendMessage(msg) {
    if (!msg.trim()) return;
    socket.emit('chat-message', { room, msg });
    chatBox.innerHTML += `<div style="text-align:right; color:#7fbf7f;"><b>You:</b> ${msg}</div>`;
    chatBox.scrollTop = chatBox.scrollHeight;
    document.getElementById('chatInput').value = '';
  }

  // Audio toggle
  function toggleAudio() {
    if (!localStream) return;
    const audioTrack = localStream.getAudioTracks()[0];
    audioTrack.enabled = !audioTrack.enabled;
  }

  // Video toggle
  function toggleVideo() {
    if (!localStream) return;
    const videoTrack = localStream.getVideoTracks()[0];
    videoTrack.enabled = !videoTrack.enabled;
  }

  // Screen share
  async function startScreenShare() {
    try {
      const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });
      const screenTrack = screenStream.getVideoTracks()[0];

      // Replace track on each peer connection
      for (const userId in peers) {
        const sender = peers[userId].getSenders().find(s => s.track.kind === 'video');
        if (sender) sender.replaceTrack(screenTrack);
      }

      // Update local video preview
      localVideo.srcObject = screenStream;

      screenTrack.onended = () => {
        // Restore original camera video track
        for (const userId in peers) {
          const sender = peers[userId].getSenders().find(s => s.track.kind === 'video');
          if (sender) sender.replaceTrack(localStream.getVideoTracks()[0]);
        }
        localVideo.srcObject = localStream;
      };
    } catch (e) {
      alert('Screen share failed or cancelled.');
    }
  }

  // Call timer
  function startTimer() {
    startTime = Date.now();
    setInterval(() => {
      const diff = Date.now() - startTime;
      const mins = Math.floor(diff / 60000);
      const secs = Math.floor((diff % 60000) / 1000);
      document.getElementById('callTimer').innerText = `${mins}:${secs.toString().padStart(2, '0')}`;
    }, 1000);
  }

  // End call
  function endCall() {
    for (const userId in peers) {
      peers[userId].close();
      delete peers[userId];
      const videoEl = document.getElementById('remoteVideo-' + userId);
      if (videoEl) {
        videoEl.srcObject = null;
        videoEl.parentNode.removeChild(videoEl);
      }
    }
    if (localStream) {
      localStream.getTracks().forEach(track => track.stop());
    }
    socket.emit('leave', room);
    window.location.reload(); // Or redirect somewhere
  }
</script>

</body>
</html>
