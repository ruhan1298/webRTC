<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>WebRTC Video Call - Fixed Version</title>
  <script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
    }
    .container {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .video-container {
      display: flex;
      gap: 20px;
      margin: 20px 0;
      justify-content: center;
    }
    .video-box {
      flex: 1;
      max-width: 500px;
    }
    .video-box h3 {
      margin: 0 0 10px 0;
      padding: 10px;
      background: #f0f0f0;
      border-radius: 5px;
      text-align: center;
    }
    video {
      width: 100%;
      height: 300px;
      background: #000;
      border: 2px solid #ddd;
      border-radius: 8px;
      object-fit: cover;
    }
    .controls {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      align-items: center;
      margin: 10px 0;
      padding: 15px;
      background: #f8f9fa;
      border-radius: 8px;
    }
    .controls input {
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
    }
    .controls button {
      padding: 8px 16px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
    }
    .btn-primary { background: #007bff; color: white; }
    .btn-success { background: #28a745; color: white; }
    .btn-danger { background: #dc3545; color: white; }
    .btn-warning { background: #ffc107; color: black; }
    .btn-secondary { background: #6c757d; color: white; }
    
    .status {
      font-weight: bold;
      padding: 12px;
      border-radius: 6px;
      margin: 10px 0;
      text-align: center;
    }
    .status.connecting { background: #cce5ff; color: #0066cc; }
    .status.connected { background: #d4edda; color: #155724; }
    .status.error { background: #f8d7da; color: #721c24; }
    .status.warning { background: #fff3cd; color: #856404; }
    
    #logs {
      background: #1a1a1a;
      color: #00ff00;
      padding: 15px;
      border-radius: 6px;
      font-family: 'Courier New', monospace;
      font-size: 12px;
      max-height: 250px;
      overflow-y: auto;
      white-space: pre-wrap;
      margin: 20px 0;
    }
    .call-info {
      background: #e3f2fd;
      padding: 10px;
      border-left: 4px solid #2196f3;
      margin: 10px 0;
      border-radius: 4px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>📞 WebRTC Video Call Test - Fixed</h2>

    <div class="controls">
      <div>
        <label>Your User ID:</label>
        <input type="text" id="userId" placeholder="Enter your unique ID" />
        <button class="btn-primary" onclick="connectUser()">🔌 Connect</button>
      </div>
      
      <div>
        <label>Call User ID:</label>
        <input type="text" id="receiverId" placeholder="Enter user ID to call" />
      </div>
      
      <div>
        <label>Duration:</label>
        <input type="number" id="callDuration" value="2" min="1" max="30" style="width: 60px;" /> minutes
      </div>
    </div>

    <div class="controls">
      <button class="btn-success" onclick="initiateCall()">📞 Start Call</button>
      <button class="btn-success" onclick="acceptCall()">✅ Accept Call</button>
      <button class="btn-danger" onclick="rejectCall()">❌ Reject Call</button>
      <button class="btn-warning" onclick="cancelCall()">🛑 Cancel Call</button>
      <button class="btn-secondary" onclick="endCall()">📴 End Call</button>
    </div>

    <div id="status" class="status">Status: Not connected</div>
    <div id="callIdHolder" class="call-info" style="display:none;"></div>

    <div class="video-container">
      <div class="video-box">
        <h3>🎥 Your Video</h3>
        <video id="localVideo" autoplay playsinline muted></video>
        <div style="text-align: center; margin-top: 5px; font-size: 12px;" id="localStatus">Camera off</div>
      </div>
      <div class="video-box">
        <h3>🎥 Remote Video</h3>
        <video id="remoteVideo" autoplay playsinline></video>
        <div style="text-align: center; margin-top: 5px; font-size: 12px;" id="remoteStatus">Waiting for connection</div>
      </div>
    </div>

    <div id="logs"></div>
  </div>

  <script>
    let socket;
    let peerConnection;
    let localStream;
    let currentCallId = null;
    let targetUserId = null;
    let callTimer;
    let isCallInitiator = false;

    const config = {
      iceServers: [
        { urls: "stun:stun.l.google.com:19302" },
        { urls: "stun:stun1.l.google.com:19302" },
        { urls: "stun:stun.services.mozilla.com" }
      ]
    };

    function log(msg) {
      const logs = document.getElementById("logs");
      const timestamp = new Date().toLocaleTimeString();
      logs.textContent += `[${timestamp}] ${msg}\n`;
      logs.scrollTop = logs.scrollHeight;
      console.log(`[WebRTC] ${msg}`);
    }

    function updateStatus(text, className = "") {
      const statusEl = document.getElementById("status");
      statusEl.textContent = text;
      statusEl.className = `status ${className}`;
    }

    function updateLocalStatus(text) {
      document.getElementById("localStatus").textContent = text;
    }

    function updateRemoteStatus(text) {
      document.getElementById("remoteStatus").textContent = text;
    }

    async function connectUser() {
      const userId = document.getElementById("userId").value.trim();
      if (!userId) return alert("Please enter your User ID first!");

      if (socket) {
        socket.disconnect();
      }

      socket = io("https://webrtc-1-pi3s.onrender.com/");

      socket.on("connect", () => {
        log(`✅ Connected to server with socket ID: ${socket.id}`);
        updateStatus("✅ Connected to server", "connected");
        socket.emit("register", userId);
        log(`📝 Registered as user: ${userId}`);
      });

      socket.on("call:incoming", async ({ callerId, callType, callId, socketId }) => {
        currentCallId = callId;
        targetUserId = callerId;
        isCallInitiator = false;
        
        log(`📞 Incoming ${callType} call from ${callerId}`);
        updateStatus(`📞 Incoming call from ${callerId}`, "warning");
        
        const callInfo = document.getElementById("callIdHolder");
        callInfo.textContent = `📞 Incoming call from: ${callerId}`;
        callInfo.style.display = "block";
      });

      socket.on("offer", async ({ offer, from }) => {
        log(`📡 Received offer from: ${from}`);
        await handleOffer(offer, from);
      });

      socket.on("answer", async ({ answer, from }) => {
        log(`📡 Received answer from: ${from}`);
        await handleAnswer(answer);
      });

      socket.on("ice-candidate", async ({ candidate, from }) => {
        log(`🧊 Received ICE candidate from: ${from}`);
        await handleIceCandidate(candidate);
      });

      socket.on("call:accepted", ({ callId }) => {
        log("✅ Call accepted by remote user");
        updateStatus("✅ Call Active", "connected");
        startAutoEndTimer();
      });

      socket.on("call:rejected", ({ callId }) => {
        log("❌ Call rejected by remote user");
        updateStatus("❌ Call Rejected", "error");
        resetCall();
      });

      socket.on("call:cancelled", ({ callId }) => {
        log("🛑 Call cancelled");
        updateStatus("🛑 Call Cancelled", "warning");
        resetCall();
      });

      socket.on("call:ended", ({ callId, duration, status }) => {
        log(`📴 Call ended - Duration: ${duration}s`);
        updateStatus("📴 Call Ended", "");
        resetCall();
      });

      socket.on("disconnect", () => {
        log("❌ Disconnected from server");
        updateStatus("❌ Disconnected", "error");
      });
    }

    async function initiateCall() {
      const callerId = document.getElementById("userId").value.trim();
      const receiverId = document.getElementById("receiverId").value.trim();
      
      if (!callerId || !receiverId) {
        return alert("Please enter both User IDs!");
      }
      
      if (!socket || !socket.connected) {
        return alert("Please connect to server first!");
      }

      try {
        log(`📞 Starting call to ${receiverId}...`);
        updateStatus("📞 Initiating call...", "connecting");
        
        isCallInitiator = true;
        targetUserId = receiverId;

        // Start local camera FIRST
        await startCamera();
        log("📹 Local camera started successfully");

        // Create peer connection
        createPeerConnection();
        log("🔗 Peer connection created");

        // Create offer
        const offer = await peerConnection.createOffer({
          offerToReceiveAudio: true,
          offerToReceiveVideo: true
        });
        
        await peerConnection.setLocalDescription(offer);
        log("📡 Local description set with offer");

        // Send call initiation and offer
        socket.emit("call:initiated", { callerId, receiverId, callType: "video" });
        socket.emit("offer", { offer, to: receiverId });
        
        log("📤 Offer sent to remote user");
        updateStatus("📤 Calling...", "connecting");

      } catch (error) {
        log(`❌ Error initiating call: ${error.message}`);
        updateStatus("❌ Call failed", "error");
        resetCall();
      }
    }

    async function handleOffer(offer, from) {
      try {
        targetUserId = from;
        
        // Start camera for receiver
        await startCamera();
        log("📹 Camera started for incoming call");

        // Create peer connection
        createPeerConnection();
        log("🔗 Peer connection created for incoming call");

        // Set remote description
        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        log("📡 Remote description set from offer");

        // Create answer
        const answer = await peerConnection.createAnswer({
          offerToReceiveAudio: true,
          offerToReceiveVideo: true
        });
        
        await peerConnection.setLocalDescription(answer);
        log("📡 Local description set with answer");

        // Send answer
        socket.emit("answer", { answer, to: from });
        log("📤 Answer sent to caller");

      } catch (error) {
        log(`❌ Error handling offer: ${error.message}`);
        updateStatus("❌ Call setup failed", "error");
      }
    }

    async function handleAnswer(answer) {
      try {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
        log("📡 Remote description set from answer");
        updateStatus("📡 Connecting...", "connecting");
      } catch (error) {
        log(`❌ Error handling answer: ${error.message}`);
      }
    }

    async function handleIceCandidate(candidate) {
      try {
        if (peerConnection && peerConnection.remoteDescription) {
          await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
          log("🧊 ICE candidate added successfully");
        } else {
          log("⚠️ ICE candidate received but remote description not ready");
        }
      } catch (error) {
        log(`❌ ICE candidate error: ${error.message}`);
      }
    }

    function createPeerConnection() {
      if (peerConnection) {
        peerConnection.close();
        log("🔗 Closed existing peer connection");
      }

      peerConnection = new RTCPeerConnection(config);
      log("🔗 New peer connection created");

      // Add local stream tracks IMMEDIATELY
      if (localStream) {
        localStream.getTracks().forEach(track => {
          const sender = peerConnection.addTrack(track, localStream);
          log(`📹 Added local ${track.kind} track to peer connection`);
        });
      }

      // Handle incoming remote stream
      peerConnection.ontrack = (event) => {
        log(`🎥 Received remote ${event.track.kind} track`);
        
        const remoteVideo = document.getElementById("remoteVideo");
        
        if (event.streams && event.streams[0]) {
          remoteVideo.srcObject = event.streams[0];
          updateRemoteStatus("Remote video connected");
          log("🎥 Remote stream connected to video element");
          
          // Force play
          remoteVideo.play().catch(e => log(`Video play error: ${e.message}`));
        }
      };

      // ICE candidate handling
      peerConnection.onicecandidate = (event) => {
        if (event.candidate && targetUserId) {
          socket.emit("ice-candidate", { candidate: event.candidate, to: targetUserId });
          log(`🧊 Sent ICE candidate: ${event.candidate.type}`);
        }
      };

      // Connection state monitoring
      peerConnection.onconnectionstatechange = () => {
        const state = peerConnection.connectionState;
        log(`🔗 Connection state: ${state}`);
        
        switch (state) {
          case 'connecting':
            updateStatus("🔗 Connecting...", "connecting");
            break;
          case 'connected':
            updateStatus("✅ Video call active", "connected");
            updateRemoteStatus("Connected");
            break;
          case 'disconnected':
            updateStatus("⚠️ Connection lost", "warning");
            updateRemoteStatus("Disconnected");
            break;
          case 'failed':
            updateStatus("❌ Connection failed", "error");
            updateRemoteStatus("Connection failed");
            setTimeout(resetCall, 3000);
            break;
        }
      };

      peerConnection.oniceconnectionstatechange = () => {
        log(`🧊 ICE state: ${peerConnection.iceConnectionState}`);
      };
    }

    async function startCamera() {
      if (localStream) {
        log("🎥 Camera already active");
        return;
      }

      try {
        log("🎥 Requesting camera access...");
        updateLocalStatus("Requesting camera...");

        localStream = await navigator.mediaDevices.getUserMedia({
          video: {
            width: { ideal: 640, max: 1280 },
            height: { ideal: 480, max: 720 },
            facingMode: 'user'
          },
          audio: {
            echoCancellation: true,
            noiseSuppression: true
          }
        });

        const localVideo = document.getElementById("localVideo");
        localVideo.srcObject = localStream;
        updateLocalStatus(`Camera active (${localStream.getTracks().length} tracks)`);
        
        // Force play local video
        localVideo.play().catch(e => log(`Local video play error: ${e.message}`));

        log(`🎥 Camera started - ${localStream.getTracks().length} tracks available`);
        
        // Log track details
        localStream.getTracks().forEach(track => {
          log(`📹 Local track: ${track.kind} - ${track.readyState}`);
        });

      } catch (error) {
        log(`❌ Camera error: ${error.message}`);
        updateLocalStatus("Camera failed");
        alert(`Camera access failed: ${error.message}`);
        throw error;
      }
    }

    async function acceptCall() {
      if (!currentCallId) {
        return alert("No incoming call to accept!");
      }

      try {
        log("✅ Accepting call...");
        socket.emit("call:accepted", { callId: currentCallId });
        updateStatus("✅ Call accepted", "connected");
        startAutoEndTimer();
        
        document.getElementById("callIdHolder").style.display = "none";
      } catch (error) {
        log(`❌ Error accepting call: ${error.message}`);
      }
    }

    function rejectCall() {
      if (!currentCallId) return alert("No call to reject!");
      socket.emit("call:rejected", { callId: currentCallId });
      log("❌ Call rejected");
      resetCall();
    }

    function cancelCall() {
      if (!currentCallId) return alert("No call to cancel!");
      socket.emit("call:cancelled", { callId: currentCallId });
      log("🛑 Call cancelled");
      resetCall();
    }

    function endCall() {
      if (!currentCallId) return alert("No active call to end!");
      socket.emit("call:ended", { callId: currentCallId });
      log("📴 Call ended by user");
      resetCall();
    }

    function resetCall() {
      currentCallId = null;
      targetUserId = null;
      isCallInitiator = false;
      
      document.getElementById("callIdHolder").style.display = "none";

      if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
        log("🔗 Peer connection closed");
      }

      if (callTimer) {
        clearTimeout(callTimer);
        callTimer = null;
      }

      if (localStream) {
        localStream.getTracks().forEach(track => {
          track.stop();
          log(`🛑 Stopped ${track.kind} track`);
        });
        localStream = null;
      }

      // Clear video displays
      document.getElementById("localVideo").srcObject = null;
      document.getElementById("remoteVideo").srcObject = null;
      
      updateLocalStatus("Camera off");
      updateRemoteStatus("Waiting for connection");
      updateStatus("Ready for new call", "");
      
      log("🔄 Call reset completed");
    }

    function startAutoEndTimer() {
      const minutes = parseInt(document.getElementById("callDuration").value) || 2;
      const ms = minutes * 60 * 1000;

      callTimer = setTimeout(() => {
        log(`⏰ Auto-ending call after ${minutes} minutes`);
        endCall();
      }, ms);

      log(`⏰ Auto-end timer set for ${minutes} minutes`);
    }

    // Initialize
    log("🚀 WebRTC Video Call Interface Ready");
    updateStatus("Ready - Enter User ID and connect", "");
  </script>
</body>
</html>